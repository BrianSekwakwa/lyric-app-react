{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/OneRecipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","id","value","Recipes","recipes","map","recipe","key","title","src","image_url","alt","length","concat","substring","publisher","react_router_dom","to","pathname","recipe_id","state","App","apiKey","e","recipeName","target","elements","count","preventDefault","apiCall","_this","axios","get","then","res","setState","data","components_Form","this","components_Recipes","Component","OneRecipe","activeRecipe","componentDidMount","location","reqUrl","href","publisher_url","Router","react_router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ccea4dbc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Form(props) {\r\n  return (\r\n    <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\r\n      <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\r\n      <select className=\"form__select\" name=\"count\" id=\"\">\r\n        <option value=\"5\">5</option>\r\n        <option value=\"10\">10</option>\r\n        <option value=\"15\">15</option>\r\n        <option value=\"20\">20</option>\r\n      </select>\r\n      <button className=\"form__button\">Search</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Recipes(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        {props.recipes.map(recipe => {\r\n          return (\r\n            <div\r\n              key={recipe.title}\r\n              className=\"col-md-4\"\r\n              style={{ marginBottom: \"2rem\" }}\r\n            >\r\n              <div className=\"recipes__box\">\r\n                <img\r\n                  className=\"recipe__box-img\"\r\n                  src={recipe.image_url}\r\n                  alt={recipe.title}\r\n                />\r\n                <div className=\"recipe__text\">\r\n                  <h5 className=\"recipes__title\">\r\n                    {recipe.title.length < 20\r\n                      ? `${recipe.title}`\r\n                      : `${recipe.title.substring(0, 25)}...`}\r\n                  </h5>\r\n                  <p className=\"recipes__subtitle\">\r\n                    Publisher: <span>{recipe.publisher}</span>\r\n                  </p>\r\n                </div>\r\n                <button className=\"recipe__buttons\">\r\n                  <Link\r\n                    to={{\r\n                      pathname: `/onerecipe/${recipe.recipe_id}`,\r\n                      state: {\r\n                        recipe: recipe.title\r\n                      }\r\n                    }}\r\n                  >\r\n                    View Recipe\r\n                  </Link>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Recipes;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\n\nclass App extends Component {\n  state = {\n    apiKey: \"73b8f533ede7054333c537ddf91ddb92\",\n    recipes: []\n  };\n\n  getRecipe = e => {\n    const recipeName = e.target.elements.recipeName.value;\n    let count = e.target.elements.count.value;\n    e.preventDefault();\n\n    const apiCall = `https://www.food2fork.com/api/search?key=${\n      this.state.apiKey\n    }&q=${recipeName}&count=${count}`;\n\n    axios.get(apiCall).then(res => {\n      this.setState({ recipes: res.data.recipes });\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">\n            Recipe <span>Finder</span>\n          </h1>\n          <p>Search for your favorite recipe</p>\n        </header>\n        <div className=\"max-width\">\n          <Form getRecipe={this.getRecipe} />\n          <Recipes recipes={this.state.recipes} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst apiKey = \"73b8f533ede7054333c537ddf91ddb92\";\r\n\r\nclass OneRecipe extends Component {\r\n  state = {\r\n    activeRecipe: []\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const title = this.props.location.state.recipe;\r\n    const reqUrl = `https://www.food2fork.com/api/search?key=${apiKey}&q=${title}`;\r\n\r\n    axios.get(reqUrl).then(res => {\r\n      this.setState({\r\n        activeRecipe: res.data.recipes[0]\r\n      });\r\n    });\r\n  };\r\n  render() {\r\n    const recipe = this.state.activeRecipe;\r\n    return (\r\n      <div className=\"container\">\r\n        {this.state.activeRecipe.length !== 0 && (\r\n          <div className=\"active-recipe\">\r\n            <img\r\n              className=\"active-recipe__img\"\r\n              src={recipe.image_url}\r\n              alt={recipe.title}\r\n            />\r\n            <h3 className=\"active-recipe__title\">{recipe.title}</h3>\r\n            <h4 className=\"active-recipe__publisher\">\r\n              publisher: <span>{recipe.publisher}</span>\r\n            </h4>\r\n            <p className=\"active-recipe__website\">\r\n              Website:{\" \"}\r\n              <span>\r\n                <a href={recipe.publisher_url}>{recipe.publisher_url}</a>\r\n              </span>\r\n            </p>\r\n            <button className=\"active-recipe__button\">\r\n              <Link to=\"/\">Go Home</Link>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OneRecipe;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport App from \"../App\";\r\nimport OneRecipe from \"./OneRecipe\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" component={App} exact />\r\n        <Route path=\"/OneRecipe/:id\" component={OneRecipe} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Router;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Router from \"./components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}